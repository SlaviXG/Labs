# Create the data frame for correlation matrix
dataframe <- data.frame(sepal_length = without_na$sepal_length,
sepal_width = without_na$sepal_width,
petal_length = without_na$petal_length)
#saving to variables for further computation
sepal_length <- (dataframe$sepal_length)
sepal_width <- (dataframe$sepal_width)
petal_length <- (dataframe$petal_length)
ggpubr::ggqqplot(sepal_length, main = "Sepal Length")
ggpubr::ggqqplot(sepal_width, main = "Sepal Width")
ggpubr::ggqqplot(petal_length, main = "Petal Length")
# Compute the correlation matrix
corr_matrix <- cor(frame)
# Visualize the correlation matrix
corrplot(corr_matrix, type = "upper", order = "hclust", tl.col = "black", tl.srt = 45)
# Load the required libraries
library(corrplot)
library(ggpubr)
library(Hmisc)
library(matlib)
# Read the data
data <- read.csv(file = 'IRIS.csv')
frame <- data.frame(data)
# Transform the variables
frame <- transform(frame,
sepal_length = as.numeric(sepal_length),
sepal_width = as.numeric(sepal_width),
petal_length = as.numeric(petal_width)
)
# Remove missing values
without_na <- na.omit(frame)
# Create the data frame for correlation matrix
dataframe <- data.frame(sepal_length = without_na$sepal_length,
sepal_width = without_na$sepal_width,
petal_length = without_na$petal_length)
#saving to variables for further computation
sepal_length <- (dataframe$sepal_length)
sepal_width <- (dataframe$sepal_width)
petal_length <- (dataframe$petal_length)
ggpubr::ggqqplot(sepal_length, main = "Sepal Length")
ggpubr::ggqqplot(sepal_width, main = "Sepal Width")
ggpubr::ggqqplot(petal_length, main = "Petal Length")
# Compute the correlation matrix
corr_matrix <- cor(frame)
# Compute the correlation matrix
corr_matrix <- cor(dataframe)
ggpubr::ggqqplot(sepal_length, main = "Sepal Length")
ggpubr::ggqqplot(sepal_width, main = "Sepal Width")
ggpubr::ggqqplot(petal_length, main = "Petal Length")
# Compute the correlation matrix
corr_matrix <- cor(dataframe)
# Visualize the correlation matrix
corrplot(corr_matrix, type = "upper", order = "hclust", tl.col = "black", tl.srt = 45)
# A function to compute the correlation matrix for three variables
get_cor_matrix <- function(first_var, second_var, third_var) {
temp <- data.frame(first_var, second_var, third_var)
return (cor(temp))
}
# A function to evaluate the partial correlation between two variables given a correlation matrix
eval_partial_cor <- function(matrix, i, j){
# Compute the minor of the correlation matrix and use it to calculate the partial correlation
return(-1 * ((-1)^(i+j) )*minor(matrix,i,j)/sqrt(minor(matrix,i,i)*minor(matrix,j,j)))
}
# A function to check a hypothesis for a partial correlation between two variables given a correlation matrix
check_hypotesis_for_partial_cor <- function(matrix, i, j, n, q, alpha = 0.95){
# Compute the partial correlation
r  <- eval_partial_cor(matrix, i, j)
# Compute the t-value and the critical t-value
t1 <- (r / sqrt(1 - r*r))* sqrt(n - q - 1)
ta <- qt(1 - alpha/2, df = n - q - 1)
# Return a vector with the absolute value of the t-value, the critical t-value, and the t-value with its sign
return (c(abs(t1) , ta, t1))
}
# A function to evaluate the set correlation given a correlation matrix
eval_set_cor <- function(matrix) {
# Compute the set correlation using the determinant and the minor of the first variable
return (1 - det(matrix)/(minor(matrix,1,1)))
}
# A function to check a hypothesis for the set correlation given a correlation matrix
check_hypotesis_for_set_cor <- function(matrix, n, q, alpha = 0.95) {
# Compute the set correlation
r  <- eval_set_cor(matrix)
# Compute the F-value and the critical F-value
f1 <- (r / sqrt(1 - r*r))*((n - q - 1) / q)
fa <- qf(1 - alpha, df1 = q, df2 = n - q - 1)
# Return a vector with the F-value, the critical F-value, and the F-value with its sign
return (c(f1 , fa, f1))
}
# Load the required libraries
library(corrplot)
library(ggpubr)
library(Hmisc)
library(matlib)
# Read the data
data <- read.csv(file = 'IRIS.csv')
frame <- data.frame(data)
# Transform the variables
frame <- transform(frame,
sepal_length = as.numeric(sepal_length),
sepal_width = as.numeric(sepal_width),
petal_length = as.numeric(petal_width)
)
# Remove missing values
without_na <- na.omit(frame)
# Create the data frame for correlation matrix
dataframe <- data.frame(sepal_length = without_na$sepal_length,
sepal_width = without_na$sepal_width,
petal_length = without_na$petal_length)
#saving to variables for further computation
sepal_length <- (dataframe$sepal_length)
sepal_width <- (dataframe$sepal_width)
petal_length <- (dataframe$petal_length)
ggpubr::ggqqplot(sepal_length, main = "Sepal Length")
ggpubr::ggqqplot(sepal_width, main = "Sepal Width")
ggpubr::ggqqplot(petal_length, main = "Petal Length")
# Compute the correlation matrix
corr_matrix <- cor(dataframe)
# Visualize the correlation matrix
corrplot(corr_matrix, type = "upper", order = "hclust", tl.col = "black", tl.srt = 45)
# A function to compute the correlation matrix for three variables
get_cor_matrix <- function(first_var, second_var, third_var) {
temp <- data.frame(first_var, second_var, third_var)
return (cor(temp))
}
# A function to evaluate the partial correlation between two variables given a correlation matrix
eval_partial_cor <- function(matrix, i, j){
# Compute the minor of the correlation matrix and use it to calculate the partial correlation
return(-1 * ((-1)^(i+j) )*minor(matrix,i,j)/sqrt(minor(matrix,i,i)*minor(matrix,j,j)))
}
# A function to check a hypothesis for a partial correlation between two variables given a correlation matrix
check_hypotesis_for_partial_cor <- function(matrix, i, j, n, q, alpha = 0.95){
# Compute the partial correlation
r  <- eval_partial_cor(matrix, i, j)
# Compute the t-value and the critical t-value
t1 <- (r / sqrt(1 - r*r))* sqrt(n - q - 1)
ta <- qt(1 - alpha/2, df = n - q - 1)
# Return a vector with the absolute value of the t-value, the critical t-value, and the t-value with its sign
return (c(abs(t1) , ta, t1))
}
# A function to evaluate the set correlation given a correlation matrix
eval_set_cor <- function(matrix) {
# Compute the set correlation using the determinant and the minor of the first variable
return (1 - det(matrix)/(minor(matrix,1,1)))
}
# A function to check a hypothesis for the set correlation given a correlation matrix
check_hypotesis_for_set_cor <- function(matrix, n, q, alpha = 0.95) {
# Compute the set correlation
r  <- eval_set_cor(matrix)
# Compute the F-value and the critical F-value
f1 <- (r / sqrt(1 - r*r))*((n - q - 1) / q)
fa <- qf(1 - alpha, df1 = q, df2 = n - q - 1)
# Return a vector with the F-value, the critical F-value, and the F-value with its sign
return (c(f1 , fa, f1))
}
# Load the required libraries
library(corrplot)
library(ggpubr)
library(Hmisc)
library(matlib)
# Read the data
data <- read.csv(file = 'IRIS.csv')
frame <- data.frame(data)
# Transform the variables
frame <- transform(frame,
sepal_length = as.numeric(sepal_length),
sepal_width = as.numeric(sepal_width),
petal_length = as.numeric(petal_width)
)
# Remove missing values
without_na <- na.omit(frame)
# Create the data frame for correlation matrix
dataframe <- data.frame(sepal_length = without_na$sepal_length,
sepal_width = without_na$sepal_width,
petal_length = without_na$petal_length)
#saving to variables for further computation
sepal_length <- (dataframe$sepal_length)
sepal_width <- (dataframe$sepal_width)
petal_length <- (dataframe$petal_length)
ggpubr::ggqqplot(sepal_length, main = "Sepal Length")
ggpubr::ggqqplot(sepal_width, main = "Sepal Width")
ggpubr::ggqqplot(petal_length, main = "Petal Length")
# Compute the correlation matrix
corr_matrix <- cor(dataframe)
# Visualize the correlation matrix
corrplot(corr_matrix, type = "upper", order = "hclust", tl.col = "black", tl.srt = 45)
# A function to compute the correlation matrix for three variables
get_cor_matrix <- function(first_var, second_var, third_var) {
temp <- data.frame(first_var, second_var, third_var)
return (cor(temp))
}
# A function to evaluate the partial correlation between two variables given a correlation matrix
eval_partial_cor <- function(matrix, i, j){
# Compute the minor of the correlation matrix and use it to calculate the partial correlation
return(-1 * ((-1)^(i+j) )*minor(matrix,i,j)/sqrt(minor(matrix,i,i)*minor(matrix,j,j)))
}
# A function to check a hypothesis for a partial correlation between two variables given a correlation matrix
check_hypotesis_for_partial_cor <- function(matrix, i, j, n, q, alpha = 0.95){
# Compute the partial correlation
r  <- eval_partial_cor(matrix, i, j)
# Compute the t-value and the critical t-value
t1 <- (r / sqrt(1 - r*r))* sqrt(n - q - 1)
ta <- qt(1 - alpha/2, df = n - q - 1)
# Return a vector with the absolute value of the t-value, the critical t-value, and the t-value with its sign
return (c(abs(t1) , ta, t1))
}
# A function to evaluate the set correlation given a correlation matrix
eval_set_cor <- function(matrix) {
# Compute the set correlation using the determinant and the minor of the first variable
return (1 - det(matrix)/(minor(matrix,1,1)))
}
# A function to check a hypothesis for the set correlation given a correlation matrix
check_hypotesis_for_set_cor <- function(matrix, n, q, alpha = 0.95) {
# Compute the set correlation
r  <- eval_set_cor(matrix)
# Compute the F-value and the critical F-value
f1 <- (r / sqrt(1 - r*r))*((n - q - 1) / q)
fa <- qf(1 - alpha, df1 = q, df2 = n - q - 1)
# Return a vector with the F-value, the critical F-value, and the F-value with its sign
return (c(f1 , fa, f1))
}
#Calculating partial correlation coefficients
sprintf("Sepal Length and Sepal Width : %f", eval_partial_cor(corr_matrix,1,2))
sprintf("Sepal Length and Petal Length : %f", eval_partial_cor(corr_matrix,1,3))
sprintf("Sepal Width and Petal Length : %f", eval_partial_cor(corr_matrix,2,3))
#Calculating set correlation coefficients and performing hypothesis testing
eval_set_cor(get_cor_matrix(sepal_length, sepal_width, petal_length))
eval_set_cor(get_cor_matrix(sepal_width, sepal_length, petal_length))
eval_set_cor(get_cor_matrix(petal_length, sepal_width, sepal_length))
#Performing hypothesis testing for partial correlation coefficients
check_hypotesis_for_partial_cor(corr_matrix, 1, 2, length(sepal_length), 2)
check_hypotesis_for_partial_cor(corr_matrix, 1, 3, length(sepal_length), 2)
check_hypotesis_for_partial_cor(corr_matrix, 2, 3, length(sepal_length), 2)
#Calculating set correlation coefficients and performing hypothesis testing for combinations of variables
sprintf("Sepal Length and (Sepal Width, Petal Length) : %f", eval_set_cor(get_cor_matrix(sepal_length, sepal_width, petal_length)))
sprintf("Sepal Width and (Sepal Length, Petal Length) : %f", eval_set_cor(get_cor_matrix(sepal_width, sepal_length, petal_length)))
sprintf("Petal Length and (Sepal Width, Sepal Length)) : %f", eval_set_cor(get_cor_matrix(petal_length, sepal_width, sepal_length)))
#Performing hypothesis testing for set correlation coefficients for combinations of variables
check_hypotesis_for_set_cor(get_cor_matrix(sepal_length, sepal_width, petal_length), length(sepal_width), 2)
check_hypotesis_for_set_cor(get_cor_matrix(sepal_width, sepal_length, petal_length), length(sepal_width), 2)
check_hypotesis_for_set_cor(get_cor_matrix(petal_length, sepal_width, sepal_length), length(sepal_width), 2)
#just for next 3 photos
x <- rnorm(4349,165,5)
y<- rnorm(4349,60,3)
z <- rnorm(4349,40,5)
#saving to variables for further computation
sepal_length <- (dataframe$sepal_length)
sepal_width <- (dataframe$sepal_width)
petal_length <- (dataframe$petal_length)
ggpubr::ggqqplot(sepal_length, main = "Sepal Length")
ggpubr::ggqqplot(sepal_width, main = "Sepal Width")
ggpubr::ggqqplot(petal_length, main = "Petal Length")
pairs(dataframe, pch = 19)
pairs(dataframe, pch = 19)
ggpubr::ggqqplot(petal_length, main = "Petal Length")
ggpubr::ggqqplot(sepal_length, main = "Sepal Length")
ggpubr::ggqqplot(sepal_width, main = "Sepal Width")
ggpubr::ggqqplot(petal_length, main = "Petal Length")
pairs(dataframe, pch = 19)
# Load the required libraries
library(corrplot)
library(ggpubr)
library(Hmisc)
library(matlib)
# Read the data
data <- read.csv(file = 'IRIS.csv')
frame <- data.frame(data)
# Transform the variables
frame <- transform(frame,
sepal_length = as.numeric(sepal_length),
sepal_width = as.numeric(sepal_width),
petal_length = as.numeric(petal_width)
)
# Remove missing values
without_na <- na.omit(frame)
# Create the data frame for correlation matrix
dataframe <- data.frame(sepal_length = without_na$sepal_length,
sepal_width = without_na$sepal_width,
petal_length = without_na$petal_length)
#saving to variables for further computation
sepal_length <- (dataframe$sepal_length)
sepal_width <- (dataframe$sepal_width)
petal_length <- (dataframe$petal_length)
ggpubr::ggqqplot(sepal_length, main = "Sepal Length")
ggpubr::ggqqplot(sepal_width, main = "Sepal Width")
ggpubr::ggqqplot(petal_length, main = "Petal Length")
pairs(dataframe, pch = 19)
# Compute the correlation matrix
corr_matrix <- cor(dataframe)
# Visualize the correlation matrix
corrplot(corr_matrix, type = "upper", order = "hclust", tl.col = "black", tl.srt = 45)
# A function to compute the correlation matrix for three variables
get_cor_matrix <- function(first_var, second_var, third_var) {
temp <- data.frame(first_var, second_var, third_var)
return (cor(temp))
}
# A function to evaluate the partial correlation between two variables given a correlation matrix
eval_partial_cor <- function(matrix, i, j){
# Compute the minor of the correlation matrix and use it to calculate the partial correlation
return(-1 * ((-1)^(i+j) )*minor(matrix,i,j)/sqrt(minor(matrix,i,i)*minor(matrix,j,j)))
}
# A function to check a hypothesis for a partial correlation between two variables given a correlation matrix
check_hypotesis_for_partial_cor <- function(matrix, i, j, n, q, alpha = 0.95){
# Compute the partial correlation
r  <- eval_partial_cor(matrix, i, j)
# Compute the t-value and the critical t-value
t1 <- (r / sqrt(1 - r*r))* sqrt(n - q - 1)
ta <- qt(1 - alpha/2, df = n - q - 1)
# Return a vector with the absolute value of the t-value, the critical t-value, and the t-value with its sign
return (c(abs(t1) , ta, t1))
}
# A function to evaluate the set correlation given a correlation matrix
eval_set_cor <- function(matrix) {
# Compute the set correlation using the determinant and the minor of the first variable
return (1 - det(matrix)/(minor(matrix,1,1)))
}
# A function to check a hypothesis for the set correlation given a correlation matrix
check_hypotesis_for_set_cor <- function(matrix, n, q, alpha = 0.95) {
# Compute the set correlation
r  <- eval_set_cor(matrix)
# Compute the F-value and the critical F-value
f1 <- (r / sqrt(1 - r*r))*((n - q - 1) / q)
fa <- qf(1 - alpha, df1 = q, df2 = n - q - 1)
# Return a vector with the F-value, the critical F-value, and the F-value with its sign
return (c(f1 , fa, f1))
}
#Calculating partial correlation coefficients
sprintf("Sepal Length and Sepal Width : %f", eval_partial_cor(corr_matrix,1,2))
sprintf("Sepal Length and Petal Length : %f", eval_partial_cor(corr_matrix,1,3))
sprintf("Sepal Width and Petal Length : %f", eval_partial_cor(corr_matrix,2,3))
#Calculating set correlation coefficients and performing hypothesis testing
eval_set_cor(get_cor_matrix(sepal_length, sepal_width, petal_length))
eval_set_cor(get_cor_matrix(sepal_width, sepal_length, petal_length))
eval_set_cor(get_cor_matrix(petal_length, sepal_width, sepal_length))
#Performing hypothesis testing for partial correlation coefficients
check_hypotesis_for_partial_cor(corr_matrix, 1, 2, length(sepal_length), 2)
check_hypotesis_for_partial_cor(corr_matrix, 1, 3, length(sepal_length), 2)
check_hypotesis_for_partial_cor(corr_matrix, 2, 3, length(sepal_length), 2)
#Calculating set correlation coefficients and performing hypothesis testing for combinations of variables
sprintf("Sepal Length and (Sepal Width, Petal Length) : %f", eval_set_cor(get_cor_matrix(sepal_length, sepal_width, petal_length)))
sprintf("Sepal Width and (Sepal Length, Petal Length) : %f", eval_set_cor(get_cor_matrix(sepal_width, sepal_length, petal_length)))
sprintf("Petal Length and (Sepal Width, Sepal Length)) : %f", eval_set_cor(get_cor_matrix(petal_length, sepal_width, sepal_length)))
#Performing hypothesis testing for set correlation coefficients for combinations of variables
check_hypotesis_for_set_cor(get_cor_matrix(sepal_length, sepal_width, petal_length), length(sepal_width), 2)
check_hypotesis_for_set_cor(get_cor_matrix(sepal_width, sepal_length, petal_length), length(sepal_width), 2)
check_hypotesis_for_set_cor(get_cor_matrix(petal_length, sepal_width, sepal_length), length(sepal_width), 2)
# Load the required libraries
library(corrplot)
# Load the required libraries
library(corrplot)
library(ggpubr)
library(Hmisc)
library(matlib)
# Read the data
data <- read.csv(file = 'IRIS.csv')
frame <- data.frame(data)
# Transform the variables
frame <- transform(frame,
sepal_length = as.numeric(sepal_length),
sepal_width = as.numeric(sepal_width),
petal_length = as.numeric(petal_width)
)
# Remove missing values
without_na <- na.omit(frame)
# Create the data frame for correlation matrix
dataframe <- data.frame(sepal_length = without_na$sepal_length,
sepal_width = without_na$sepal_width,
petal_length = without_na$petal_length)
#saving to variables for further computation
sepal_length <- (dataframe$sepal_length)
sepal_width <- (dataframe$sepal_width)
petal_length <- (dataframe$petal_length)
ggpubr::ggqqplot(sepal_length, main = "Sepal Length")
ggpubr::ggqqplot(sepal_width, main = "Sepal Width")
ggpubr::ggqqplot(petal_length, main = "Petal Length")
#building the plots
ggpubr::ggqqplot(sepal_length, main = "Sepal Length")
ggpubr::ggqqplot(sepal_width, main = "Sepal Width")
ggpubr::ggqqplot(petal_length, main = "Petal Length")
# Visualize the correlation matrix
corrplot(corr_matrix, type = "upper", order = "hclust", tl.col = "black", tl.srt = 45)
# Visualize the correlation matrix
corrplot(corr_matrix, type = "upper", order = "hclust", tl.col = "black", tl.srt = 45, add = TRUE)
# Compute the correlation matrix
corr_matrix <- cor(dataframe)
# Visualize the correlation matrix
corrplot(corr_matrix, type = "upper", order = "hclust", tl.col = "black", tl.srt = 45, add = TRUE)
# Visualize the correlation matrix
corrplot(corr_matrix, type = "upper", order = "hclust", tl.col = "black", tl.srt = 45, addCoef.col = "black")
# Load the required libraries
library(corrplot)
library(ggpubr)
library(Hmisc)
library(matlib)
# Read the data
data <- read.csv(file = 'IRIS.csv')
frame <- data.frame(data)
# Transform the variables
frame <- transform(frame,
sepal_length = as.numeric(sepal_length),
sepal_width = as.numeric(sepal_width),
petal_length = as.numeric(petal_width)
)
# Remove missing values
without_na <- na.omit(frame)
# Create the data frame for correlation matrix
dataframe <- data.frame(sepal_length = without_na$sepal_length,
sepal_width = without_na$sepal_width,
petal_length = without_na$petal_length)
#saving to variables for further computation
sepal_length <- (dataframe$sepal_length)
sepal_width <- (dataframe$sepal_width)
petal_length <- (dataframe$petal_length)
#building the plots
ggpubr::ggqqplot(sepal_length, main = "Sepal Length")
ggpubr::ggqqplot(sepal_width, main = "Sepal Width")
ggpubr::ggqqplot(petal_length, main = "Petal Length")
# Load the required libraries
library(corrplot)
library(ggpubr)
library(Hmisc)
library(matlib)
# Read the data
data <- read.csv(file = 'IRIS.csv')
frame <- data.frame(data)
# Transform the variables
frame <- transform(frame,
sepal_length = as.numeric(sepal_length),
sepal_width = as.numeric(sepal_width),
petal_length = as.numeric(petal_width)
)
# Remove missing values
without_na <- na.omit(frame)
# Create the data frame for correlation matrix
dataframe <- data.frame(sepal_length = without_na$sepal_length,
sepal_width = without_na$sepal_width,
petal_length = without_na$petal_length)
#saving to variables for further computation
sepal_length <- (dataframe$sepal_length)
sepal_width <- (dataframe$sepal_width)
petal_length <- (dataframe$petal_length)
#building the plots
ggpubr::ggqqplot(sepal_length, main = "Sepal Length")
# Compute the correlation matrix
corr_matrix <- cor(dataframe)
# Visualize the correlation matrix
corrplot(corr_matrix, type = "upper", order = "hclust", tl.col = "black", tl.srt = 45, addCoef.col = "black")
#dot chart
pairs(dataframe, pch = 19)
# Visualize the correlation matrix
corrplot(corr_matrix, type = "upper", order = "hclust", tl.col = "black", tl.srt = 45,
main = "Correlation Matrix of My Data")
# Visualize the correlation matrix
corrplot(corr_matrix, type = "upper", order = "hclust", tl.col = "black", tl.srt = 45, addCoef.col = "black")
#dot chart
pairs(dataframe, pch = 19)
# Visualize the correlation matrix
corrplot(corr_matrix, type = "upper", order = "hclust", tl.col = "black", tl.srt = 45, addCoef.col = "black")
# Visualize the correlation matrix
corrplot(corr_matrix, type = "lower", order = "hclust", tl.col = "black", tl.srt = 45, addCoef.col = "black")
# Visualize the correlation matrix
corrplot(corr_matrix, type = "lower", order = "hclust", tl.col = "black", tl.srt = 45, addCoef.col = "black")
# A function to compute the correlation matrix for three variables
get_cor_matrix <- function(first_var, second_var, third_var) {
temp <- data.frame(first_var, second_var, third_var)
return (cor(temp))
}
# A function to evaluate the partial correlation between two variables given a correlation matrix
eval_partial_cor <- function(matrix, i, j){
# Compute the minor of the correlation matrix and use it to calculate the partial correlation
return(-1 * ((-1)^(i+j) )*minor(matrix,i,j)/sqrt(minor(matrix,i,i)*minor(matrix,j,j)))
}
# A function to check a hypothesis for a partial correlation between two variables given a correlation matrix
check_hypotesis_for_partial_cor <- function(matrix, i, j, n, q, alpha = 0.95){
# Compute the partial correlation
r  <- eval_partial_cor(matrix, i, j)
# Compute the t-value and the critical t-value
t1 <- (r / sqrt(1 - r*r))* sqrt(n - q - 1)
ta <- qt(1 - alpha/2, df = n - q - 1)
# Return a vector with the absolute value of the t-value, the critical t-value, and the t-value with its sign
return (c(abs(t1) , ta, t1))
}
# A function to evaluate the set correlation given a correlation matrix
eval_set_cor <- function(matrix) {
# Compute the set correlation using the determinant and the minor of the first variable
return (1 - det(matrix)/(minor(matrix,1,1)))
}
# A function to check a hypothesis for the set correlation given a correlation matrix
check_hypotesis_for_set_cor <- function(matrix, n, q, alpha = 0.95) {
# Compute the set correlation
r  <- eval_set_cor(matrix)
# Compute the F-value and the critical F-value
f1 <- (r / sqrt(1 - r*r))*((n - q - 1) / q)
fa <- qf(1 - alpha, df1 = q, df2 = n - q - 1)
# Return a vector with the F-value, the critical F-value, and the F-value with its sign
return (c(f1 , fa, f1))
}
#Calculating partial correlation coefficients
sprintf("Sepal Length and Sepal Width : %f", eval_partial_cor(corr_matrix,1,2))
sprintf("Sepal Length and Petal Length : %f", eval_partial_cor(corr_matrix,1,3))
sprintf("Sepal Width and Petal Length : %f", eval_partial_cor(corr_matrix,2,3))
#Calculating partial correlation coefficients
sprintf("Sepal Length and Sepal Width : %f", eval_partial_cor(corr_matrix,1,2))
sprintf("Sepal Length and Petal Length : %f", eval_partial_cor(corr_matrix,1,3))
sprintf("Sepal Width and Petal Length : %f", eval_partial_cor(corr_matrix,2,3))
#Calculating partial correlation coefficients
sprintf("Sepal Length and Sepal Width : %f", eval_partial_cor(corr_matrix,1,2))
sprintf("Sepal Length and Petal Length : %f", eval_partial_cor(corr_matrix,1,3))
sprintf("Sepal Width and Petal Length : %f", eval_partial_cor(corr_matrix,2,3))
#Calculating set correlation coefficients and performing hypothesis testing for combinations of variables
sprintf("Sepal Length and (Sepal Width, Petal Length) : %f", eval_set_cor(get_cor_matrix(sepal_length, sepal_width, petal_length)))
sprintf("Sepal Width and (Sepal Length, Petal Length) : %f", eval_set_cor(get_cor_matrix(sepal_width, sepal_length, petal_length)))
sprintf("Petal Length and (Sepal Width, Sepal Length)) : %f", eval_set_cor(get_cor_matrix(petal_length, sepal_width, sepal_length)))
